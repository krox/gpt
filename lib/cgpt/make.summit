#!/bin/bash
# Configure
root="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." >/dev/null 2>&1 && pwd )"
GRID=${root}/dependencies/Grid/build
if [ ! -d ${GRID} ];
then
    GRID=${root}/../Grid/build
fi
if [ ! -d ${GRID} ];
then
    echo "Could not detect Grid location"
    exit 2
fi
NPARALLEL=42

# Start
N=0

mkdir -p build logs

echo "================================================================================"
echo "  Compiling CGPT against Grid in ${GRID}"
echo "================================================================================"

NUMPY_INCLUDE=$(python3 -c "import numpy; print(numpy.get_include())")
CXX=$(grep "GRID_CXX " ${GRID}/Makefile | sed "s/^[^=]*=//")
CXXFLAGS="$(grep "GRID_CXXFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") $(grep "AM_CFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") -I${GRID} -I${GRID}/Grid -I${NUMPY_INCLUDE} $(python3-config --includes)"
LDFLAGS="$(grep "GRID_LDFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") $(grep "AM_LDFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//")"
LIBS=$(grep "GRID_LIBS " ${GRID}/Makefile | sed "s/^[^=]*=//")

echo "CXX = $CXX"
echo "CXXFLAGS = $CXXFLAGS"
echo "LDFLAGS = $LDFLAGS"
echo "LIBS = $LIBS"

echo "================================================================================"

./update

rm -f next.lock

# Compile
function abort {
    echo "Cancelling..."
    kill -TERM 0
    wait
    echo "Done"
}

trap abort INT

function next {
    nextFile=$1

    while true
    do
	(
	    flock -n 9 || exit 1
	    for src in lib/*.cc lib/instantiate/*.cc
	    do
		bn=$(basename $src .cc)
		dst=build/${bn}.o
		if [ $src -nt $dst ];
		then
		    touch $dst
		    echo $src > $nextFile
		    exit 0
		fi
	    done
	    rm -f $nextFile
	) 9> next.lock

	success=$?
	if ((success == 0))
	then
	    break
	fi

	sleep 0.1
    done
}

for ((N=0;N<NPARALLEL;N++))
do
    (
	while true
	do
	    next next.${N}
	    if [ -f next.${N} ];
	    then
		src=$(cat next.${N})
		bn=$(basename $src .cc)
		dst=build/${bn}.o

		echo " [CXX] $bn"
		start=$SECONDS
		${CXX} --shared ${CXXFLAGS} -c $src -o $dst 1> logs/${bn}.out 2> logs/${bn}.err
		success=$?
		elapsed=$((SECONDS-start))
		if [[ "$success" == "0" ]];
		then
		    printf "%-70s %s\n" " [OK ] $bn " "($elapsed s)"
		else
		    printf "%-70s %-30s %s\n" " [ERR] $bn " "($elapsed s)" "logs/${bn}.err"
		    touch $dst
		fi
	    else
		exit 0
	    fi
	done
    ) &
done

wait

rm -f next.lock
find build -size 0 -delete 2> /dev/null


OBS="build/lattice.o build/lattice_double_iMColor1.o build/lattice_double_iMColor2.o build/lattice_double_iMColor3.o build/lattice_double_iMSinglet10.o build/lattice_double_iMSinglet4.o build/lattice_double_iMSpin4.o build/lattice_double_iMSpin4Color1.o build/lattice_double_iMSpin4Color2.o build/lattice_double_iMSpin4Color3.o build/lattice_double_iSinglet.o build/lattice_double_iVColor1.o build/lattice_double_iVColor2.o build/lattice_double_iVColor3.o build/lattice_double_iVSinglet10.o build/lattice_double_iVSinglet4.o build/lattice_double_iVSpin4.o build/lattice_double_iVSpin4Color1.o build/lattice_double_iVSpin4Color2.o build/lattice_double_iVSpin4Color3.o build/lattice_single_iMColor1.o build/lattice_single_iMColor2.o build/lattice_single_iMColor3.o build/lattice_single_iMSinglet10.o build/lattice_single_iMSinglet4.o build/lattice_single_iMSpin4.o build/lattice_single_iMSpin4Color1.o build/lattice_single_iMSpin4Color2.o build/lattice_single_iMSpin4Color3.o build/lattice_single_iSinglet.o build/lattice_single_iVColor1.o build/lattice_single_iVColor2.o build/lattice_single_iVColor3.o build/lattice_single_iVSinglet10.o build/lattice_single_iVSinglet4.o build/lattice_single_iVSpin4.o build/lattice_single_iVSpin4Color1.o build/lattice_single_iVSpin4Color2.o build/lattice_single_iVSpin4Color3.o build/basis.o build/block.o build/coordinates.o build/distribute.o build/eval.o build/expression_linear_combination_double_iMColor1.o build/expression_linear_combination_double_iMColor2.o build/expression_linear_combination_double_iMColor3.o build/expression_linear_combination_double_iMSinglet10.o build/expression_linear_combination_double_iMSinglet4.o build/expression_linear_combination_double_iMSpin4.o build/expression_linear_combination_double_iMSpin4Color1.o build/expression_linear_combination_double_iMSpin4Color2.o build/expression_linear_combination_double_iMSpin4Color3.o build/expression_linear_combination_double_iSinglet.o build/expression_linear_combination_double_iVColor1.o build/expression_linear_combination_double_iVColor2.o build/expression_linear_combination_double_iVColor3.o build/expression_linear_combination_double_iVSinglet10.o build/expression_linear_combination_double_iVSinglet4.o build/expression_linear_combination_double_iVSpin4.o build/expression_linear_combination_double_iVSpin4Color1.o build/expression_linear_combination_double_iVSpin4Color2.o build/expression_linear_combination_double_iVSpin4Color3.o build/expression_linear_combination_single_iMColor1.o build/expression_linear_combination_single_iMColor2.o build/expression_linear_combination_single_iMColor3.o build/expression_linear_combination_single_iMSinglet10.o build/expression_linear_combination_single_iMSinglet4.o build/expression_linear_combination_single_iMSpin4.o build/expression_linear_combination_single_iMSpin4Color1.o build/expression_linear_combination_single_iMSpin4Color2.o build/expression_linear_combination_single_iMSpin4Color3.o build/expression_linear_combination_single_iSinglet.o build/expression_linear_combination_single_iVColor1.o build/expression_linear_combination_single_iVColor2.o build/expression_linear_combination_single_iVColor3.o build/expression_linear_combination_single_iVSinglet10.o build/expression_linear_combination_single_iVSinglet4.o build/expression_linear_combination_single_iVSpin4.o build/expression_linear_combination_single_iVSpin4Color1.o build/expression_linear_combination_single_iVSpin4Color2.o build/expression_linear_combination_single_iVSpin4Color3.o build/expression_mul_double_iMColor1.o build/expression_mul_double_iMColor2.o build/expression_mul_double_iMColor3.o build/expression_mul_double_iMSinglet10.o build/expression_mul_double_iMSinglet4.o build/expression_mul_double_iMSpin4.o build/expression_mul_double_iMSpin4Color1.o build/expression_mul_double_iMSpin4Color2.o build/expression_mul_double_iMSpin4Color3.o build/expression_mul_double_iSinglet.o build/expression_mul_double_iVColor1.o build/expression_mul_double_iVColor2.o build/expression_mul_double_iVColor3.o build/expression_mul_double_iVSinglet10.o build/expression_mul_double_iVSinglet4.o build/expression_mul_double_iVSpin4.o build/expression_mul_double_iVSpin4Color1.o build/expression_mul_double_iVSpin4Color2.o build/expression_mul_double_iVSpin4Color3.o build/expression_mul_single_iMColor1.o build/expression_mul_single_iMColor2.o build/expression_mul_single_iMColor3.o build/expression_mul_single_iMSinglet10.o build/expression_mul_single_iMSinglet4.o build/expression_mul_single_iMSpin4.o build/expression_mul_single_iMSpin4Color1.o build/expression_mul_single_iMSpin4Color2.o build/expression_mul_single_iMSpin4Color3.o build/expression_mul_single_iSinglet.o build/expression_mul_single_iVColor1.o build/expression_mul_single_iVColor2.o build/expression_mul_single_iVColor3.o build/expression_mul_single_iVSinglet10.o build/expression_mul_single_iVSinglet4.o build/expression_mul_single_iVSpin4.o build/expression_mul_single_iVSpin4Color1.o build/expression_mul_single_iVSpin4Color2.o build/expression_mul_single_iVSpin4Color3.o build/fp16.o build/grid.o build/gversions.o build/init.o build/io.o build/lib.o build/mpi.o build/munge.o build/operators.o build/random.o build/tensors.o build/time.o build/transform.o build/util.o"
# Link
#nvcc --link --shared build/*.o ${CXXFLAGS} ${LDFLAGS} ${LIBS} -lGrid -o ../cgpt.so
nvcc --link --shared ${OBS} ${CXXFLAGS} ${LDFLAGS} ${LIBS} -lGrid -o ../cgpt.so
